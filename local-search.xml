<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>服务器部署 Nginx + Django + Vue</title>
    <link href="/2021/06/24/deploy-django-vue/"/>
    <url>/2021/06/24/deploy-django-vue/</url>
    
    <content type="html"><![CDATA[<p>本篇记录我配置和部署服务器的每一步，主要包括服务器配置 Django 虚拟环境、uWSGI 和 Nginx 的使用以及报错的纠正。以 Linux 服务器为例，因此需要具备一定的 Linux 知识基础。</p><h2 id="服务器预设"><a href="#服务器预设" class="headerlink" title="服务器预设"></a>服务器预设</h2><h3 id="租服务器"><a href="#租服务器" class="headerlink" title="租服务器"></a>租服务器</h3><p>各大云平台，如腾讯云、阿里云、华为云等，都有学生优惠。我这里选择的是腾讯云，原因：控制台界面简洁优雅。</p><p>相关配置仅供参考：</p><p><img src="/img/articles/21-6-24/server.png" alt="服务器配置"></p><ul><li>镜像信息：CentOS 7.6 64bit</li><li>实例规格：CPU 1核，内存 2GB</li><li>磁盘：系统盘 40GB</li><li>流量包套餐：带宽 5Mbps，流量包 1000GB/月（免费）</li></ul><h3 id="SSH-远程连接"><a href="#SSH-远程连接" class="headerlink" title="SSH 远程连接"></a>SSH 远程连接</h3><p>配置 SSH 远程连接，方便本地操作服务器，而无需每次都登录云平台。</p><p>在控制台中点击登录，进入服务器终端。第一步需要初始化超级用户 root 的密码，进入 superuser 权限。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo passwd       <span class="hljs-comment"># 初始化密码</span><br>su                <span class="hljs-comment"># 切换到root超级用户</span><br></code></pre></td></tr></table></figure><p>修改配置文件，允许密码或密钥远程连接。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/ssh/sshd_config      <span class="hljs-comment"># 编辑ssh设置文件</span><br></code></pre></td></tr></table></figure><p>在打开的文件中，修改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">RSAAuthentication yes                       <span class="hljs-comment"># 开启rsa验证，需要添加</span><br>PubkeyAuthentication yes                    <span class="hljs-comment"># 开启公钥登录，一般被注释掉了，去掉前面的#就好</span><br>AuthorizedKeysFile .ssh/authorized_keys     <span class="hljs-comment"># 公钥保存位置，原来就有</span><br>PasswordAuthentication yes                  <span class="hljs-comment"># 开启使用密码登录</span><br></code></pre></td></tr></table></figure><p>保存退出，重启 SSH 服务。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">service sshd restart        <span class="hljs-comment"># 重启ssh服务</span><br></code></pre></td></tr></table></figure><p>设置完毕后，即可在本地 powershell 或 git bash 连接服务器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh root@&lt;IP address&gt;       <span class="hljs-comment"># IP address 为你服务器的公网IP地址</span><br></code></pre></td></tr></table></figure><p>另外，VScode 的 <a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-ssh">Remote - SSH</a> 远程连接插件真香。</p><h3 id="配置公钥"><a href="#配置公钥" class="headerlink" title="配置公钥"></a>配置公钥</h3><p>配置公钥后，本地连接服务器，无需每次都输入密码。</p><p>首先，生成本地电脑的公钥。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa           <span class="hljs-comment"># 打开cmd或powershell输入</span><br></code></pre></td></tr></table></figure><p>默认回车即可，成功后在 <code>C:\Users\用户名\.ssh</code> 文件夹下会生成 <code>id_rsa</code> 和 <code>id_rsa.pub</code>，后者就是本地用户的密钥。打开该文件，复制内容。然后使用 ssh 命令登录远程服务器，在 root 用户根目录下创建 .ssh 文件夹并进入，再创建 authorized_keys 文件，将密钥粘贴进去，之后重启 ssh 服务。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">service sshd restart        <span class="hljs-comment"># 重启ssh</span><br></code></pre></td></tr></table></figure><h3 id="更新系统软件包"><a href="#更新系统软件包" class="headerlink" title="更新系统软件包"></a>更新系统软件包</h3><p>服务器的预配置都比较古老，依次输入以下命令升级软件包或依赖。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum update -y                               <span class="hljs-comment"># 更新系统软件包</span><br>yum -y groupinstall <span class="hljs-string">&quot;Development tools&quot;</span>     <span class="hljs-comment"># 安装软件管理包</span><br>yum install openssl-devel bzip2-devel expat-devel gdbm-devel readline-devel sqlite-devel psmisc libffi-devel epel-release     <span class="hljs-comment"># 安装可能使用的依赖</span><br></code></pre></td></tr></table></figure><h2 id="配置-Django"><a href="#配置-Django" class="headerlink" title="配置 Django"></a>配置 Django</h2><h3 id="安装-python3-8-4"><a href="#安装-python3-8-4" class="headerlink" title="安装 python3.8.4"></a>安装 python3.8.4</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/<span class="hljs-built_in">local</span>                   <span class="hljs-comment"># 我一般喜欢把文件下载到该目录下</span><br>wget https://www.python.org/ftp/python/3.8.4/Python-3.8.4.tgz<br>tar -zxvf Python-3.8.4.tgz      <span class="hljs-comment"># 解压python包</span><br></code></pre></td></tr></table></figure><p>进入 Python 包路径，并编译安装到指定路径 /usr/local/python3</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> Python-3.8.4<br>./configure --prefix=/usr/<span class="hljs-built_in">local</span>/python3<br>make &amp;&amp; make install<br></code></pre></td></tr></table></figure><p>安装成功后，建立软链接，添加环境变量。因为服务器系统自带有 python、python2、python3，因此我命名为 python3.8，避免冲突。但我的服务器只有 pip3 没有 pip，所以我将 pip3.8 的软连接命名为 pip。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ln -s /usr/<span class="hljs-built_in">local</span>/python3/bin/python3.8 /usr/bin/python3.8<br>ln -s /usr/<span class="hljs-built_in">local</span>/python3/bin/pip3.8 /usr/bin/pip<br></code></pre></td></tr></table></figure><p>检测是否安装成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3.8 -V<br>pip -V<br></code></pre></td></tr></table></figure><h3 id="安装虚拟环境"><a href="#安装虚拟环境" class="headerlink" title="安装虚拟环境"></a>安装虚拟环境</h3><p>建议安装虚拟环境 virtualenv，当不同项目要求的 python 版本不同时，不会产生冲突。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install virtualenv<br>pip install virtualenvwrapper       <span class="hljs-comment"># 管理虚拟环境</span><br></code></pre></td></tr></table></figure><p>下载成功后，创建存储虚拟环境的目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkdir ~/.virtualenvs                <span class="hljs-comment"># 我一般存放在 /root/.virtualenvs，可自行修改</span><br></code></pre></td></tr></table></figure><p>查找 <code>virtualenvwrapper.sh</code> 文件位置，添加环境。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find / -name virtualenvwrapper.sh<br></code></pre></td></tr></table></figure><p>编辑 <code>.bash_profile</code> 文件，在末尾添加这两句，其中 <code>source</code> 后的路径为前面查到的路径。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> WORKON_HOME=<span class="hljs-variable">$HOME</span>/.virtualenvs<br><span class="hljs-built_in">source</span>  /usr/<span class="hljs-built_in">local</span>/python3/bin/virtualenvwrapper.sh<br></code></pre></td></tr></table></figure><p>保存修改后，更新配置信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.bash_profile <br></code></pre></td></tr></table></figure><p>如果保存时报错，在 /etc/profile 中加入下面内容，再 <code>source</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3.8<br><span class="hljs-built_in">export</span> VIRTUALENVWRAPPER_VIRTUALENV=/usr/<span class="hljs-built_in">local</span>/python3/bin/virtualenv<br></code></pre></td></tr></table></figure><h3 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h3><p>通过 -p 指定使用的Python版本，创建成功后自动进入该虚拟环境。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkvirtualenv -p python3.8 django        <span class="hljs-comment"># django为虚拟环境名称</span><br></code></pre></td></tr></table></figure><p>如果你希望将当前虚拟环境安装的所有插件配置到新虚拟环境中，可以执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip freeze &gt; requirements.txt           <span class="hljs-comment"># 导出依赖</span><br>pip install -r requirements.txt         <span class="hljs-comment"># 进入新虚拟环境后再执行</span><br></code></pre></td></tr></table></figure><p><strong>虚拟环境的其它常用命令</strong></p><ul><li>查看创建的全部虚拟环境：<code>workon</code></li><li>使用某一虚拟环境：<code>workon 虚拟环境名称</code></li><li>退出当前虚拟环境：<code>deactivate</code></li><li>删除虚拟环境：<code>rmvirtualenv 虚拟环境名称</code> 记得退出再删除</li></ul><h3 id="虚拟环境中安装-Django-和-uWSGI"><a href="#虚拟环境中安装-Django-和-uWSGI" class="headerlink" title="虚拟环境中安装 Django 和 uWSGI"></a>虚拟环境中安装 Django 和 uWSGI</h3><p>uWSGI 可以理解为服务器上持续运行 Django 的代理服务器，用于与 Django 后端进行数据传输等，后续配置需要使用。</p><p>进入前面创建的虚拟环境，安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install django==3.2         <span class="hljs-comment"># 可指定版本</span><br>pip install uwsgi<br></code></pre></td></tr></table></figure><blockquote><p>uWSGI 要安装两次，一次在虚拟环境中，另一次退出虚拟环境进行安装</p></blockquote><p>创建 uWSGI 的软链接。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ln -s /usr/<span class="hljs-built_in">local</span>/python3/bin/uwsgi /usr/bin/uwsgi<br></code></pre></td></tr></table></figure><h2 id="安装-Nginx"><a href="#安装-Nginx" class="headerlink" title="安装 Nginx"></a>安装 Nginx</h2><p>Nginx 是 Http 反向代理 web 服务器，同时也提供 IMAP/POP3/SMTP 服务，占用内存少，并发能力强。在这里我们只需要了解，Nginx 能帮我们在指定端口跑我们的项目就好了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install nginx<br></code></pre></td></tr></table></figure><p>安装成功后，相关的文件存储路径为</p><ul><li>安装成功后，默认的网站目录为 <code>/usr/share/nginx/html</code></li><li>默认的配置文件为 <code>/etc/nginx/nginx.conf</code></li><li>自定义配置文件目录为 <code>/etc/nginx/conf.d/</code></li></ul><p>在启动之前，还需确保服务器的相关端口已打开。http 对应 80 端口，https 对应 443 端口。一般在云平台租的服务器，可以在控制台中的防火墙处开启相应端口。我的设置可供参考。</p><p><img src="/img/articles/21-6-24/duankou.png" alt="服务器端口"></p><p>接下来启动 Nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl start nginx<br></code></pre></td></tr></table></figure><p>启动成功后，浏览器搜索服务器 IP 地址，就能访问到 Nginx 主页了。</p><p><img src="/img/articles/21-6-24/Nginx.jpg" alt="Nginx 默认主页"></p><h2 id="部署项目"><a href="#部署项目" class="headerlink" title="部署项目"></a>部署项目</h2><h3 id="上传项目"><a href="#上传项目" class="headerlink" title="上传项目"></a>上传项目</h3><p>Django 后端项目文件，直接上传至服务器即可。Vue 框架写的前端，需要使用 <code>npm run build</code> 命令进行打包，再将生成的 dist 目录上传。</p><p>这里推荐软件 <a href="https://filezilla-project.org/">FileZilla</a>，用于本地与服务器文件传输十分方便。</p><h3 id="配置-uWSGI"><a href="#配置-uWSGI" class="headerlink" title="配置 uWSGI"></a>配置 uWSGI</h3><p>新建文件 uwsgi.ini，我习惯放置于 Django 项目的根目录下，用于指定项目路径、最大进程数、运行端口等。我的配置参数可供参考。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[uwsgi]</span><br><span class="hljs-attr">socket</span> = <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8080</span><br><span class="hljs-attr">chdir</span> = /root/Ops/django<br><span class="hljs-attr">wsgi-file</span> = /root/Ops/django/django3/wsgi.py<br><span class="hljs-attr">master</span> = <span class="hljs-literal">true</span> <br><span class="hljs-attr">enable-threads</span> = <span class="hljs-literal">true</span><br><span class="hljs-attr">processes</span> = <span class="hljs-number">8</span><br><span class="hljs-attr">buffer-size</span> = <span class="hljs-number">65536</span><br><span class="hljs-attr">vacuum</span> = <span class="hljs-literal">true</span><br><span class="hljs-attr">daemonize</span> = /root/Ops/django/uwsgi.log<br><span class="hljs-attr">virtualenv</span> = /root/.virtualenvs/django<br><span class="hljs-attr">uwsgi_read_timeout</span> = <span class="hljs-number">600</span><br><span class="hljs-attr">threads</span> = <span class="hljs-number">4</span><br><span class="hljs-attr">chmod-socket</span> = <span class="hljs-number">664</span><br></code></pre></td></tr></table></figure><p>简要介绍该文件的配置信息：</p><ul><li><code>[uwsgi]</code>：必须有这个[uwsgi]，不然会报错</li><li><code>socket</code>：该端口为后端 Django 的运行端口，可自定义，但须与后面 Nginx 的配置一致</li><li><code>chdir</code>：django 项目路径</li><li><code>wsgi-file</code>：django 项目的 wsgi.py 文件路径</li><li><code>master</code>：开启主进程</li><li><code>processes</code>：最大进程数量</li><li><code>vacuum</code>：当服务器退出的时候自动删除 unix socket 文件和 pid 文件</li><li><code>daemonize</code>：输出日志，有报错时可查看</li><li><code>virtualenv</code>：项目虚拟环境路径</li></ul><p>切换当前路径到 uwsgi.ini 文件所在目录，启动 uWSGI。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">uwsgi --ini uwsgi.ini<br></code></pre></td></tr></table></figure><p>使用 <code>ps</code> 命令查看进程，检测是否成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ps -aux | grep uwsgi<br></code></pre></td></tr></table></figure><p><img src="/img/articles/21-6-24/uwsgi.png" alt="uwsgi 进程查看"></p><h3 id="配置-Nginx"><a href="#配置-Nginx" class="headerlink" title="配置 Nginx"></a>配置 Nginx</h3><blockquote><p>此处先给出部署域名的样例，仅服务器 IP 以后再给出。</p></blockquote><p>首先，删除 <code>/etc/nginx/nginx.conf</code> 文件中 <code>server&#123;...&#125;</code> 部分的代码。当然，如果怕出错，也可先将原本的 nginx.conf 文件备份一下。</p><p>接下来，在 <code>/etc/nginx/conf.d</code> 文件夹中修改默认文件 <code>default.conf</code>（若不存在则新建一个），文件内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs conf">server &#123;<br>    listen 80;<br>    listen 443 ssl;<br>    server_name  zewan.top www.zewan.top;<br><br>    location / &#123;<br>        root /root/Ops/vue/dist;<br>        index index.html index.htm;<br>        try_files $uri $uri/ /index.html;<br>    &#125;<br><br>    location /api &#123;        <br>        include /etc/nginx/uwsgi_params;<br>        uwsgi_pass 127.0.0.1:8080;                                                               <br>    &#125;<br><br>    ssl_certificate /etc/nginx/ssl/zewan.top.crt;<br>    ssl_certificate_key /etc/nginx/ssl/zewan.top.key;<br>    ssl_session_timeout  5m;<br>    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;<br>    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;<br>    ssl_prefer_server_ciphers  on;<br><br>    error_page 497  https://$host$uri?$args;<br>&#125;<br></code></pre></td></tr></table></figure><p>简要说明文件内容的作用：</p><ul><li><code>listen</code> 后接端口，即设定访问的端口，此处同时开放 80 和 443</li><li><code>server_name</code> 为访问域名</li><li><code>location /</code> 后描述前端 dist 项目文件夹的存放地址，<strong>需根据自身情况修改</strong>，注意 dist 即为前端项目的根目录</li><li><code>location /api</code> 后为后端项目运行端口，注意 <code>uwsgi_pass</code> 后须与之前 uWSGI 的配置保持一致</li><li><code>ssl_certificate[_key]</code> 为 SSL 证书存储路径</li></ul><p><strong>重要提醒</strong></p><p>采用 <code>location /api</code> 与 uWSGI 连接，最终将后端运行在 <code>:443/api/</code>。需保证后端的路由都是 <code>api/*</code>，即 Django 项目的 <code>urls.py</code> 文件所有路由前需加 <code>api/</code>。</p><h2 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h2><p>检测 Nginx 配置是否有误，成功后重启 Nginx 服务。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">nginx -t                <span class="hljs-comment"># 测试</span><br>nginx -s reload         <span class="hljs-comment"># 重新加载</span><br></code></pre></td></tr></table></figure><p><strong>注意</strong>，若修改了后端 Django 内容或其它内容，须重启 uWSGI 和 Nginx 服务，否则不生效！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">ps -ef | grep uwsgi         <span class="hljs-comment"># 查看uWSGI进程</span><br>killall -9 uwsgi            <span class="hljs-comment"># 用kill方法把uwsgi进程杀死</span><br>uwsgi --ini uwsgi.ini       <span class="hljs-comment"># 重启uwsgi</span><br>nginx -s reload             <span class="hljs-comment"># nginx平滑重启</span><br></code></pre></td></tr></table></figure><p>另外，如果你的项目文件存放于 root 用户目录下，访问网站时可能出现 500 或 403 Forbidden 权限报错，此时需修改 <code>/etc/nginx/nginx.conf</code>，将文件首行的 <code>user nginx</code> 修改为 <code>user root</code>。</p><p>至此网站已部署完毕，欢迎访问<a href="https://zewan.top/">我的网站</a>。项目<a href="https://github.com/ZewanHuang/Online-Publish-Vue">网上出版系统</a>已开源，欢迎交流学习！</p>]]></content>
    
    
    <categories>
      
      <category>前后端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>Deploy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/06/16/hello-world/"/>
    <url>/2021/06/16/hello-world/</url>
    
    <content type="html"><![CDATA[<p>给博客换了个主题 Hexo Fluid，体验极佳，顺便简略记录一下部署过程和 Hexo 的一些基本用法。</p><span id="more"></span><h2 id="关于-Hexo"><a href="#关于-Hexo" class="headerlink" title="关于 Hexo"></a>关于 Hexo</h2><blockquote><p>引自官方文档</p></blockquote><p><a href="https://hexo.io/" target="_blank">Hexo</a> 是一个快速建议的博客框架，可使用 <a href="https://daringfireball.net/projects/markdown/" target="_blank">Markdown</a> 编辑页面。</p><p><a href="https://github.com/fluid-dev/hexo-theme-fluid" target="_blank">Fluid</a> 是本博客采用的主题，十分美观，建议入坑。</p><h2 id="部署过程"><a href="#部署过程" class="headerlink" title="部署过程"></a>部署过程</h2><h3 id="1-准备环境-node-和-git"><a href="#1-准备环境-node-和-git" class="headerlink" title="1. 准备环境 node 和 git"></a>1. 准备环境 node 和 git</h3><p>node 环境的配置可以参照：<a href="https://www.cnblogs.com/jianguo221/p/11487532.html" target="_blank">windows安装npm教程–nodejs</a></p><p>上面参考资料只需要看前半部分。Git 安装较简单，大概下载安装即成功。</p><h3 id="2-安装-Hexo"><a href="#2-安装-Hexo" class="headerlink" title="2. 安装 Hexo"></a>2. 安装 Hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>安装完成后，找个你想放置博客项目文件的地方，执行下面命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init MyBlog<br><span class="hljs-built_in">cd</span> MyBlog<br>npm install<br></code></pre></td></tr></table></figure><p>新建完成后，文件夹目录与功能如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">.<br>├── _config.yml     <span class="hljs-comment"># 网站的配置信息，您可以在此配置大部分的参数。 </span><br>├── package.json<br>├── scaffolds       <span class="hljs-comment"># 模版文件夹</span><br>├── <span class="hljs-built_in">source</span>          <span class="hljs-comment"># 资源文件夹，除 _posts 文件，其他以下划线_开头的文件或者文件夹不会被编译打包到public文件夹</span><br>|   ├── _drafts     <span class="hljs-comment"># 草稿文件</span><br>|   └── _posts      <span class="hljs-comment"># 文章Markdowm文件 </span><br>└── themes          <span class="hljs-comment"># 主题文件夹</span><br></code></pre></td></tr></table></figure><h3 id="3-导入-fluid-主题"><a href="#3-导入-fluid-主题" class="headerlink" title="3. 导入 fluid 主题"></a>3. 导入 fluid 主题</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><p>然后在博客目录下创建 _config.fluid.yml，该文件为主题配置文件，具体配置参见 <a href="https://hexo.fluid-dev.com/docs/guide/">Configuration</a>。我的个人配置仅作参考：<a href="https://paste.ubuntu.com/p/bmNjKsWZW9/" target="_blank">ZewanBlog_config.fluid.yml</a></p><p>如下修改 Hexo 博客目录中的 _config.yml：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span>        <span class="hljs-comment"># 指定主题</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span>     <span class="hljs-comment"># 指定语言，会影响主题显示的语言，按需修改</span><br></code></pre></td></tr></table></figure><p>运行 <code>hexo s</code> 命令，在本地浏览 <a href="http://localhost:4000/">http://localhost:4000</a> 可以预览效果。</p><h3 id="4-新建-GitHub-仓库"><a href="#4-新建-GitHub-仓库" class="headerlink" title="4. 新建 GitHub 仓库"></a>4. 新建 GitHub 仓库</h3><p>注意仓库名必须是 用户名.github.io</p><h3 id="5-部署到-GitHub"><a href="#5-部署到-GitHub" class="headerlink" title="5. 部署到 GitHub"></a>5. 部署到 GitHub</h3><p>在 _config.yml 配置文件中修改：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span><br>    <span class="hljs-attr">github:</span> <span class="hljs-string">https://github.com/ZewanHuang/ZewanHuang.github.io</span>  <span class="hljs-comment"># 修改自己的仓库</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><p>安装部署插件 <a href="https://github.com/hexojs/hexo-deployer-git" target="_blank">hexo-deployer-git</a>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>最后执行命令部署上传，以下 g 是 generate 缩写，d 是 deploy 缩写：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean      <span class="hljs-comment"># 清除缓存文件和已生成的静态文件</span><br>hexo g -d       <span class="hljs-comment"># 部署上传</span><br></code></pre></td></tr></table></figure><h2 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h2><h3 id="创建关于页面"><a href="#创建关于页面" class="headerlink" title="创建关于页面"></a>创建关于页面</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new page about     <span class="hljs-comment"># 创建关于页面</span><br></code></pre></td></tr></table></figure><h3 id="创建新页面"><a href="#创建新页面" class="headerlink" title="创建新页面"></a>创建新页面</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new <span class="hljs-string">&#x27;article-title&#x27;</span>    <span class="hljs-comment"># 新建页面</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a>本地预览</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo s<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean                  <span class="hljs-comment"># 清除缓存</span><br>hexo g -d                   <span class="hljs-comment"># 部署上传</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
